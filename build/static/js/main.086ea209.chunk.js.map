{"version":3,"sources":["components/Projects/index.js","components/Project/ProjectName.js","components/Project/ProjectTable.js","components/Project/index.js","App.js","serviceWorker.js","index.js"],"names":["Projects","data","map","i","key","id","to","project_name","React","Component","ProjectName","props","toggleInput","setState","flag","state","this","project","className","value","onChange","e","target","onClick","statusDropdown","status_name","background","ProjectTable","onChangeStatus","tasks","item","index","status","Number","backgroundColor","filter","style","textAlign","description","Project","match","params","length","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.086ea209.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport data from \"../data.json\";\r\n\r\nclass Projects extends React.Component {\r\n  render() {\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Project Name</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {data.map(i => {\r\n            return (\r\n              <tr key={i.id}>\r\n                <td>{i.id}</td>\r\n                <td>\r\n                  <Link to={\"/project/\" + i.id}>{i.project_name}</Link>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React from \"react\";\r\n\r\nclass ProjectName extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      flag: false,\r\n      project_name: \"\"\r\n    };\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.setState({\r\n      project_name: this.props.project.project_name\r\n    });\r\n  }\r\n\r\n  toggleInput = () => {\r\n    this.setState({\r\n      flag: !this.state.flag\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { flag, project_name } = this.state;\r\n    return (\r\n      <div className=\"padding-10px padding-left-10p\">\r\n        {flag ? (\r\n          <div>\r\n            <span>\r\n              <input\r\n                value={project_name}\r\n                onChange={e => this.setState({ project_name: e.target.value })}\r\n              />\r\n            </span>\r\n            <button\r\n              className=\"btn padding-left-10px\"\r\n              onClick={() => this.toggleInput()}\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <span>\r\n            <span className=\"fs-27\">{project_name}</span>\r\n            <button\r\n              className=\"btn padding-left-10px\"\r\n              onClick={() => this.toggleInput()}\r\n            >\r\n              Edit\r\n            </button>\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectName;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst statusDropdown = [\r\n  {\r\n    status_name: \"Not Started\",\r\n    id: 1,\r\n    background: \"#faa0a0\"\r\n  },\r\n  {\r\n    status_name: \"In Progress\",\r\n    id: 2,\r\n    background: \"#a0a0fe\"\r\n  },\r\n  {\r\n    status_name: \"Done\",\r\n    id: 3,\r\n    background: \"#a0ffa0\"\r\n  }\r\n];\r\n\r\nclass ProjectTable extends React.Component {\r\n  state = {\r\n    project: null\r\n  };\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.setState({\r\n      project: this.props.project\r\n    });\r\n  }\r\n\r\n  onChangeStatus = (e, id) => {\r\n    //now update the task background based on id\r\n    const { project } = this.state;\r\n\r\n    //Now make the mao\r\n    //find index\r\n    project.tasks.map((item, index) => {\r\n      if (item.id === id) {\r\n        project.tasks[index].status = Number(e.target.value);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      project\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { project } = this.state;\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Task Name</th>\r\n            <th>Status</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {project.tasks.map(i => {\r\n            //get the background color\r\n            let backgroundColor = statusDropdown.filter(\r\n              item => item.id === i.status\r\n            )[0].background;\r\n\r\n            return (\r\n              <tr style={{ backgroundColor }} key={i.id}>\r\n                <td>{i.id}</td>\r\n                <td style={{ textAlign: \"left\" }}> {i.description}</td>\r\n                <td>\r\n                  <select\r\n                    value={i.status}\r\n                    onChange={e => this.onChangeStatus(e, i.id)}\r\n                  >\r\n                    {statusDropdown.map(item => {\r\n                      return (\r\n                        <option value={item.id} key={item.id}>\r\n                          {item.status_name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectTable;\r\n","import React from \"react\";\r\nimport data from \"../data.json\";\r\nimport ProjectName from \"./ProjectName.js\";\r\nimport ProjectTable from \"./ProjectTable.js\";\r\n\r\nclass Project extends React.Component {\r\n  state = {\r\n    project: null\r\n  };\r\n\r\n  UNSAFE_componentWillMount() {\r\n    //set up data\r\n\r\n    let { project } = this.props;\r\n    //\r\n    project = data.filter(\r\n      ({ id }) => id === Number(this.props.match.params.id)\r\n    );\r\n\r\n    this.setState({\r\n      project: project.length ? project[0] : {}\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { project } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <ProjectName project={project} />\r\n        <ProjectTable project={project} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\nimport Project from \"./components/Project\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={() => <Projects />} />\n\n        <Route\n          exact\n          path=\"/project/:id\"\n          component={props => <Project {...props} />}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}